using SigncryptionScheme.Computations;
using System.Collections.Generic;
using System.Numerics;

namespace SigncryptionScheme.Signcryption.Participants.Sender
{
    /// <summary>
    /// This class <c>Sender</c> inherits from the <c>Signcryption</c> class for executing methods defined in the <c>Signcryption</c> class.
    /// This class generates the Sender and it can perform signcryption process.
    /// </summary>
    public class Sender : Signcryption
    {
        /// <value>Property <c>SecretKey</c> represents the secret key of the sender.</value>
        private BigInteger SecretKey;

        /// <value>Property <c>RandomNumberZ</c> represents the randomly selected large number Z.</value>
        private BigInteger RandomNumberZ;

        /// <value>Property <c>GeneratedNumberBeta</c> represents the computed value Beta.</value>
        private BigInteger GeneratedNumberBeta;

        /// <value>Property <c>kg</c> represents the instance of the <c>GlobalParameters</c> class.</value>
        private KeyGeneration kg;

        /// <summary>
        /// This constructor initializes necessary properties for the sender once it is called.
        /// </summary>
        public Sender()
        {
            kg = new KeyGeneration();
            SecretKey = this.GenerateSecretKey1(kg.gb.RandomNumberN);
            RandomNumberZ = this.GenerateRandomNumberZ(kg.gb.RandomNumberN);
            GeneratedNumberBeta = this.GenerateNumberBeta(GetPrivateKey());
        }


        /// <summary>
        /// This method performs the signcryption process.
        /// (<paramref name="message"/>,<paramref name="_PublicKeyReceiver"/>).
        /// </summary>
        /// <returns>
        /// A dictionary list storing values computed by the signcryption process, namely; A1, A2, C, R.
        /// </returns>
        /// <remarks>
        /// It computes all the output values of the signcryption process and stores them in the dictionary list.
        /// Dictionary keys defined in publicly accessible <c>ConstantValuesSigncryption</c> class.
        /// </remarks>
        /// <param><c>message</c> is a message to be signcrypted.</param>
        /// <param><c>_PublicKeyReceiver</c> is a public key of the receiver.</param>
        public Dictionary<string, byte[]> MessageSigncryption(string message, BigInteger _PublicKeyReceiver)
        {
            return this.SigncryptTheMessage(message, _PublicKeyReceiver, this.GeneratedNumberBeta, this.SecretKey, this.kg.gb);
        }

        /// <summary>
        /// This method generates the public key of the sender.
        /// </summary>
        /// <returns>
        /// A Big Integer, public key of the sender.
        /// </returns>
        public BigInteger GetPublicKey()
        {
            return kg.PublicKey;
        }

        /// <summary>
        /// This method generates the private key of the sender.
        /// </summary>
        /// <returns>
        /// A Big Integer, private key of the sender.
        /// </returns>
        /// <remarks>
        /// Private key is not generated by the sender. the instance of <c>KeyGeneration</c> class 
        /// is generated them once it is initialized.
        /// </remarks>
        private BigInteger GetPrivateKey()
        {
            return kg.PrivateKey;
        }

        /// <summary>
        /// This method generates the secret key, which is only known by the sender, within the range between
        /// 1 and computed Number N-1.
        /// (<paramref name="_RandomNumberN"/>).
        /// </summary>
        /// <returns>
        /// A Big Integer, randomly chosen key1.
        /// </returns>
        /// <param><c>_RandomNumberN</c> is a computed large number N.</param>
        private BigInteger GenerateSecretKey1(BigInteger _RandomNumberN)
        {
            RandomBigIntegerGenerator RBI = new RandomBigIntegerGenerator();
            return RBI.RandomBigInteger(BigInteger.Zero, _RandomNumberN - 1);
        }


        /// <summary>
        /// This method generates the random number Z, which is only known by the sender, within the range between
        /// 1 and computed Number N-1.
        /// (<paramref name="_RandomNumberN"/>).
        /// </summary>
        /// <returns>
        /// A Big Integer, randomly chosen number Z.
        /// </returns>
        /// <param><c>_RandomNumberN</c> is a computed large number N.</param>
        private BigInteger GenerateRandomNumberZ(BigInteger _RandomNumberN)
        {
            RandomBigIntegerGenerator RBI = new RandomBigIntegerGenerator();
            return RBI.RandomBigInteger(BigInteger.Zero, _RandomNumberN - 1);
        }

        /// <summary>
        /// This method computes number beta.
        /// (<paramref name="_PrivateKey"/>).
        /// </summary>
        /// <returns>
        /// A Big Integer, computed value beta.
        /// </returns>
        /// <remarks>
        /// Beta value computes as following;
        /// Z^{x}modN
        /// x: Private key of the sender.
        /// </remarks>
        /// <param><c>_PrivateKey</c> is a private key of the sender.</param>
        private BigInteger GenerateNumberBeta(BigInteger _PrivateKey)
        {
            return BigInteger.ModPow(RandomNumberZ, _PrivateKey, kg.gb.RandomNumberN);
        }

        
    }
}
